# Generated by Django 5.2.6 on 2025-10-08 14:35

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ToolCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Tool Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ToolDefinition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Unique tool name (e.g., 'create_task')", max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('wellbeing', 'Wellbeing & Check-ins'), ('tasks', 'Task Management'), ('reminders', 'Reminders'), ('moments', 'Moments & Journaling'), ('communication', 'Communication'), ('information', 'Information Retrieval'), ('ai', 'AI & ML'), ('custom', 'Custom')], db_index=True, max_length=50)),
                ('description', models.TextField(help_text='Detailed description for LLM (when to use this tool)')),
                ('usage_examples', models.JSONField(blank=True, default=list, help_text='["Example 1", "Example 2"]')),
                ('execution_type', models.CharField(choices=[('script', 'Python Script'), ('lambda', 'AWS Lambda'), ('webhook', 'External Webhook')], help_text='How this tool is executed', max_length=20)),
                ('script_path', models.CharField(blank=True, help_text='Absolute path to Python script (for script type)', max_length=500)),
                ('script_timeout', models.IntegerField(default=30, help_text='Script timeout in seconds')),
                ('lambda_function_arn', models.CharField(blank=True, help_text='AWS Lambda ARN (for lambda type)', max_length=500)),
                ('lambda_region', models.CharField(blank=True, default='us-east-1', max_length=50)),
                ('webhook_url', models.URLField(blank=True, help_text='External webhook URL (for webhook type)', max_length=500)),
                ('webhook_method', models.CharField(blank=True, choices=[('GET', 'GET'), ('POST', 'POST')], default='POST', max_length=10)),
                ('webhook_headers', models.JSONField(blank=True, default=dict, help_text='{"Authorization": "Bearer token"}')),
                ('webhook_timeout', models.IntegerField(default=30, help_text='Webhook timeout in seconds')),
                ('parameters_schema', models.JSONField(default=dict, help_text='JSON Schema defining tool parameters')),
                ('response_schema', models.JSONField(blank=True, default=dict, help_text='Expected response format')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this tool is available')),
                ('requires_auth', models.BooleanField(default=True)),
                ('allowed_roles', models.JSONField(blank=True, default=list, help_text='["admin", "premium_user"]')),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('execution_count', models.IntegerField(default=0)),
                ('success_count', models.IntegerField(default=0)),
                ('error_count', models.IntegerField(default=0)),
                ('avg_execution_time_ms', models.FloatField(default=0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tools', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ToolExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('parameters', models.JSONField()),
                ('result', models.JSONField(blank=True, null=True)),
                ('status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('timeout', 'Timeout')], max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('execution_time_ms', models.IntegerField(null=True)),
                ('conversation_id', models.UUIDField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='llm_tools.tooldefinition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_executions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='tooldefinition',
            index=models.Index(fields=['category', 'is_active'], name='llm_tools_t_categor_d1dc08_idx'),
        ),
        migrations.AddIndex(
            model_name='tooldefinition',
            index=models.Index(fields=['execution_type'], name='llm_tools_t_executi_f7433e_idx'),
        ),
        migrations.AddIndex(
            model_name='toolexecution',
            index=models.Index(fields=['tool', 'status'], name='llm_tools_t_tool_id_628eae_idx'),
        ),
        migrations.AddIndex(
            model_name='toolexecution',
            index=models.Index(fields=['user', 'created_at'], name='llm_tools_t_user_id_149d23_idx'),
        ),
    ]
