"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab

# Only import settings_local in development (when DEBUG env var is not explicitly set to False)
if os.environ.get('DEBUG', 'True') != 'False':
    try:
        from .settings_local import *
    except ImportError:
        pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Override with environment variables if they exist (for production)
SECRET_KEY = os.environ.get('SECRET_KEY', globals().get('SECRET_KEY', 'django-insecure-change-this'))
DEBUG = os.environ.get('DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')

# Database - override if DATABASE_URL environment variable exists
if 'DATABASE_URL' in os.environ:
    # Parse DATABASE_URL: postgresql://user:password@host:port/dbname
    db_url = os.environ.get('DATABASE_URL')
    db_parts = db_url.replace('postgresql://', '').split('@')
    user_pass = db_parts[0].split(':')
    host_db = db_parts[1].split('/')
    host_port = host_db[0].split(':')
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': host_db[1],
            'USER': user_pass[0],
            'PASSWORD': user_pass[1],
            'HOST': host_port[0],
            'PORT': host_port[1] if len(host_port) > 1 else '5432',
        }
    }

# Field encryption key from environment
if 'FIELD_ENCRYPTION_KEY' in os.environ:
    FIELD_ENCRYPTION_KEY = os.environ.get('FIELD_ENCRYPTION_KEY')

# Ollama settings from environment (only override if env var exists)
if 'OLLAMA_BASE_URL' in os.environ:
    OLLAMA_BASE_URL = os.environ.get('OLLAMA_BASE_URL')
elif 'OLLAMA_BASE_URL' not in globals():
    OLLAMA_BASE_URL = 'http://localhost:11434'

if 'OLLAMA_DEFAULT_MODEL' in os.environ:
    OLLAMA_DEFAULT_MODEL = os.environ.get('OLLAMA_DEFAULT_MODEL')
elif 'OLLAMA_DEFAULT_MODEL' not in globals():
    OLLAMA_DEFAULT_MODEL = 'llama2'

# ChromaDB settings
# Production (Docker): USE_DOCKER_CHROMADB=true, connects to chromadb:8000
# Development (Local): USE_DOCKER_CHROMADB=false, uses local persistent storage
USE_DOCKER_CHROMADB = os.environ.get('USE_DOCKER_CHROMADB', 'false')
CHROMADB_HOST = os.environ.get('CHROMADB_HOST', 'chromadb')  # Docker service name
CHROMADB_PORT = int(os.environ.get('CHROMADB_PORT', '8000'))
CHROMADB_PATH = os.path.join(BASE_DIR, 'chromadb_data')  # Local dev storage

# CORS settings from environment
if 'CORS_ALLOWED_ORIGINS' in os.environ:
    CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS').split(',')
    CORS_ALLOW_ALL_ORIGINS = False
if 'CSRF_TRUSTED_ORIGINS' in os.environ:
    CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS').split(',')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'ninja_extra',
    'ninja_jwt',
    'django_celery_beat',

    'llm_service',
    'llm_tools',
    'llm_chat',

    'users',
    'wellbeing',
    'todo',
    'notifications',
    'files',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serve static files in production
    'corsheaders.middleware.CorsMiddleware',  # Add CORS middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', os.path.join(BASE_DIR.parent, 'media'))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Celery Beat Schedule - Periodic tasks
CELERY_BEAT_SCHEDULE = {
    'process-scheduled-notifications': {
        'task': 'notifications.tasks.process_scheduled_notifications',
        'schedule': 60.0,  # Run every 60 seconds
    },
    'schedule-daily-checkins': {
        'task': 'wellbeing.tasks.schedule_daily_checkins_for_all_users',
        'schedule': crontab(hour=0, minute=0),  # Run daily at midnight
    },
    'send-pending-checkin-notifications': {
        'task': 'wellbeing.tasks.send_pending_checkin_notifications',
        'schedule': 60.0,  # Run every minute
    },
    'cleanup-expired-files': {
        'task': 'files.tasks.cleanup_expired_files',
        'schedule': 3600.0,  # Run every hour
    },
    'cleanup-old-temporary-files': {
        'task': 'files.tasks.cleanup_old_temporary_files',
        'schedule': 3600.0,  # Run every hour
    },
    'cleanup-expired-shares': {
        'task': 'files.tasks.cleanup_expired_shares',
        'schedule': 3600.0,  # Run every hour
    },
    'recalculate-storage-quotas': {
        'task': 'files.tasks.recalculate_all_storage_quotas',
        'schedule': crontab(hour=2, minute=0),  # Run daily at 2 AM
    },
}
